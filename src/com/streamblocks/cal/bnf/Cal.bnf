{
    parserClass="com.streamblocks.parser.CalParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Cal"
    psiImplClassSuffix="Impl"
    psiPackage="com.streamblocks.cal.psi"
    psiImplPackage="com.streamblocks.cal.psi.impl"

    elementTypeHolderClass="com.streamblocks.cal.psi.CalTypes"
    elementTypeClass="com.streamblocks.cal.psi.CalElementType"
    tokenTypeClass="com.streamblocks.cal.psi.CalTokenType"

    psiImplUtilClass="com.streamblocks.cal.psi.impl.CalPsiImplUtil"

    tokens=[
    // Keywords
    ACTION="action"
    ACTOR="actor"
    ALL="all"
    AND="and"
    ANY="any"
    AT="at"
    AT_START="at*"
    BEGIN="begin"
    CHOOSE="choose"
    CONST="const"
    DELAY="delay"
    DIV="div"
    DO="do"
    DOM="dom"
    ELSE="else"
    ELSEIF="elsif"
    END="end"
    ENDACTION="endaction"
    ENDACTOR="endactor"
    ENDCHOOSE="endchoose"
    ENDFOREACH="endforeach"
    ENDFUNCTION="endfunction"
    ENDIF="endif"
    ENDINITIALIZE="endinitialize"
    ENDLAMBDA="endlambda"
    ENDLET="endlet"
    ENDPRIORITY="endpriority"
    ENDPROC="endproc"
    ENDPROCEDURE="endprocedure"
    ENDSCHEDULE="endschedule"
    ENDWHILE="endwhile"
    ENTITY="entity"
    FALSE="false"
    FOR="for"
    FOREACH="foreach"
    FSM="fsm"
    FUNCTION="function"
    GUARD="guard"
    IF="if"
    IMPORT="import"
    IN="in"
    INITIALIZE="initialize"
    LAMBDA="lambda"
    LET="let"
    MAP="map"
    MOD="mod"
    MULTI="multi"
    MUTABLE="mutable"
    NAMESPACE="namespace"
    NOT="not"
    NULL="null"
    OLD="old"
    OR="or"
    PRIORITY="priority"
    PROC="proc"
    PROCEDURE="procedure"
    REGEXP="regexp"
    REPEAT="repeat"
    RNG="rng"
    SCHEDULE="schedule"
    THEN="then"
    TIME="time"
    TRUE="true"
    TYPE="type"
    VAR="var"
    WHILE="while"
    PACKAGE="package"
    UNIT="unit"

    PUBLIC="public"
    PRIVATE="private"
    LOCAL="local"

    NETWORK="network"
    ENTITIES="entities"
    STRUCTURE="structure"
    EXTERNAL="external"

    // Delimiters and separator
    COLON=":"
    SEMI_COLON=";"
    DOT="."
    COMMA=","
    LONG_DOUBLE_ARROW_RIGHT="==>"
    LONG_SINGLE_ARROW_RIGHT="-->"
    LONG_SINGLE_ARROW_LEFT="<--"
    LPAREN="("
    RPAREN=")"
    LCURLY="{"
    RCURLY="}"
    LSQUARE="["
    LSQUARE="]"

    // Operators
    EQ="="
    COLON_EQ=":="
    SINGLE_ARROW_RIGHT="->"
    STAR="*"
    DOT_STAR=".*"
    CINNAMON_BUN="@"
    BIT_AND='&'
    BIT_OR="|"
    BIT_XOR="^"
    QUOTIENT="/"
    DIVISION="div"
    DOUBLE_EQUAL="=="
    DOUBLE_START="**"
    GREATER_OR_EQUAL=">="
    LESS_OR_EQUAL="<="
    COND_AND="&&"
    AND="and"
    COND_OR="||"
    OR="or"
    GREATER_THAN=">"
    LESS_THAN="<"
    REMAINDER="%"
    MODULO="mod"
    NOT_EQUAL="NOT_EQUAL"
    PLUS="+"
    SHIFT_LEFT="<<"
    SHIFT_RIGHT=">>"
    TWO_DOTS=".."
    COMPLEMENT="~"
    BIT_NOT="!"
    NOT="not"
    HASHTAG="#"

    comment='regexp://.*'
    block_comment="regexp:/\*(.|\n)*\*/"
    space='regexp:\s+'
    number='regexp:\d+(\.\d*)?'
    id='regexp:(\p{Alpha})\w*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    ]

    generateTokenAccessors=true
}

